# Copyright 2025 the original author or authors.
# <p>
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# <p>
# https://www.apache.org/licenses/LICENSE-2.0
# <p>
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.AddHttpRequestTypeParameter
examples:
- description: '`AddHttpRequestTypeParameterTest#authenticationProvider`'
  sources:
  - before: |
      import io.micronaut.http.HttpRequest;
      import io.micronaut.security.authentication.AuthenticationProvider;
      import io.micronaut.security.authentication.AuthenticationRequest;
      import io.micronaut.security.authentication.AuthenticationResponse;
      import org.reactivestreams.Publisher;

      public class AuthenticationProviderUserPassword implements AuthenticationProvider {

          @Override
          public Publisher<AuthenticationResponse> authenticate(HttpRequest<?> httpRequest,
                                                                AuthenticationRequest<?, ?> authenticationRequest) {
              return null;
          }
      }
    after: |
      import io.micronaut.http.HttpRequest;
      import io.micronaut.security.authentication.AuthenticationProvider;
      import io.micronaut.security.authentication.AuthenticationRequest;
      import io.micronaut.security.authentication.AuthenticationResponse;
      import org.reactivestreams.Publisher;

      public class AuthenticationProviderUserPassword implements AuthenticationProvider<HttpRequest<?>> {

          @Override
          public Publisher<AuthenticationResponse> authenticate(HttpRequest<?> httpRequest,
                                                                AuthenticationRequest<?, ?> authenticationRequest) {
              return null;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.BeanPropertyCapitalizationStrategy
examples:
- description: '`BeanPropertyCapitalizationStrategyTest#deCapitalizeProperty`'
  sources:
  - before: |
      package a.b;
      import io.micronaut.core.beans.BeanIntrospection;
      import io.micronaut.core.beans.BeanProperty;
      import org.checkerframework.checker.units.qual.C;

      class T {
          void p() {
              BeanIntrospection<C> introspection = BeanIntrospection.getIntrospection(C.class);
              BeanProperty<C, String> p1 = introspection.getRequiredProperty("CName", String.class);
              Optional<BeanProperty<C, String>> p2 = introspection.getProperty("CName", String.class);
              Optional<BeanProperty<C, Object>> p3 = introspection.getProperty("CName");
          }
      }
    after: |
      package a.b;
      import io.micronaut.core.beans.BeanIntrospection;
      import io.micronaut.core.beans.BeanProperty;
      import org.checkerframework.checker.units.qual.C;

      class T {
          void p() {
              BeanIntrospection<C> introspection = BeanIntrospection.getIntrospection(C.class);
              BeanProperty<C, String> p1 = introspection.getRequiredProperty("cName", String.class);
              Optional<BeanProperty<C, String>> p2 = introspection.getProperty("cName", String.class);
              Optional<BeanProperty<C, Object>> p3 = introspection.getProperty("cName");
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.CopyNonInheritedAnnotations
examples:
- description: '`CopyNonInheritedAnnotationsTest#refreshableFromGrandparent`'
  sources:
  - before: |
      package abc;
      import io.micronaut.http.annotation.Controller;
      import io.micronaut.http.annotation.Get;

      public class SuperClass {

          @Controller
          public class MyController extends MiddleController {
              @Get
              public String info() {
                  return "system info: ";
              }
          }
      }
    after: |
      package abc;
      import io.micronaut.http.annotation.Controller;
      import io.micronaut.http.annotation.Get;
      import io.micronaut.runtime.context.scope.Refreshable;

      public class SuperClass {

          @Controller
          @Refreshable
          public class MyController extends MiddleController {
              @Get
              public String info() {
                  return "system info: ";
              }
          }
      }
    language: java
  - before: |
      package abc;
      import io.micronaut.runtime.context.scope.Refreshable;

      @Refreshable
      public abstract class BaseController {
      }

      public abstract class MiddleController extends BaseController {
      }
    after: |
      package abc;
      import io.micronaut.runtime.context.scope.Refreshable;

      @Refreshable
      public abstract class BaseController {
      }

      @Refreshable
      public abstract class MiddleController extends BaseController {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.FixDeprecatedExceptionHandlerConstructors
examples:
- description: '`FixDeprecatedExceptionHandlerConstructorsTest#addsErrorProcessorConstructor`'
  sources:
  - before: |
      package abc;

      import io.micronaut.validation.exceptions.ConstraintExceptionHandler;

      public class ApiClientValidationExceptionHandler extends ConstraintExceptionHandler {
          private void someMethod(){}
      }
    after: |
      package abc;

      import io.micronaut.http.server.exceptions.response.ErrorResponseProcessor;
      import io.micronaut.validation.exceptions.ConstraintExceptionHandler;
      import jakarta.inject.Inject;

      public class ApiClientValidationExceptionHandler extends ConstraintExceptionHandler {

          @Inject
          public ApiClientValidationExceptionHandler(ErrorResponseProcessor errorResponseProcessor) {
              super(errorResponseProcessor);
          }
          private void someMethod(){}
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.Micronaut3to4Migration
examples:
- description: '`UpdateBuildToJava17Test#updateGradleJavaVersion`'
  sources:
  - before: |
      version = "0.1.0-SNAPSHOT"
      group = "com.example"
      java {
          sourceCompatibility = JavaVersion.toVersion("1.8")
          targetCompatibility = JavaVersion.toVersion("1.8")
      }
    after: |
      version = "0.1.0-SNAPSHOT"
      group = "com.example"
      java {
          sourceCompatibility = JavaVersion.toVersion("17")
          targetCompatibility = JavaVersion.toVersion("17")
      }
    path: build.gradle
    language: groovy
  - before: project
    language: mavenProject
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.OncePerRequestHttpServerFilterToHttpServerFilter
examples:
- description: '`OncePerRequestHttpServerFilterToHttpServerFilterTest#simpleConversion`'
  sources:
  - before: |
      package a.b;

      import io.micronaut.core.order.Ordered;
      import io.micronaut.http.HttpRequest;
      import io.micronaut.http.MutableHttpResponse;
      import io.micronaut.http.filter.OncePerRequestHttpServerFilter;
      import io.micronaut.http.filter.ServerFilterChain;
      import org.reactivestreams.Publisher;

      public class MyServerFilter extends OncePerRequestHttpServerFilter {
          @Override
          public int getOrder() {
              return Ordered.LOWEST_PRECEDENCE;
          }

          @Override
          public Publisher<MutableHttpResponse<?>> doFilterOnce(HttpRequest<?> request, ServerFilterChain chain) {
              getKey(MyServerFilter.class);
          }

          @Override
          public String getCName() {
              return "cname";
          }
      }
    after: |
      package a.b;

      import io.micronaut.core.order.Ordered;
      import io.micronaut.http.HttpRequest;
      import io.micronaut.http.MutableHttpResponse;
      import io.micronaut.http.filter.HttpServerFilter;
      import io.micronaut.http.filter.ServerFilterChain;
      import org.reactivestreams.Publisher;

      public class MyServerFilter implements HttpServerFilter {
          @Override
          public int getOrder() {
              return Ordered.LOWEST_PRECEDENCE;
          }

          @Override
          public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request, ServerFilterChain chain) {
              /*TODO: See `Server Filter Behavior` in https://docs.micronaut.io/3.0.x/guide/#breaks for details*/ getKey(MyServerFilter.class);
          }

          @Override
          public String getCName() {
              return "cname";
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.ProviderImplementationsToMicronautFactories
examples:
- description: '`ProviderImplementationsGenerateFactoriesTest#javaxProviderImplementation`'
  sources:
  - before: |
      package abc;

      import io.micronaut.context.annotation.Bean;
      import io.micronaut.core.annotation.NonNull;
      import javax.inject.Provider;
      import javax.inject.Singleton;

      @Bean
      @Singleton
      public class AProvider implements Provider<A> {

          @Override
          public A get() {
              return new AImpl();
          }

          private void doSomething(@NonNull String arg) {
          }
      }
    after: |
      package abc;

      import io.micronaut.context.annotation.Bean;
      import io.micronaut.context.annotation.Factory;
      import io.micronaut.core.annotation.NonNull;
      import javax.inject.Provider;
      import javax.inject.Singleton;

      @Factory
      public class AProvider implements Provider<A> {

          @Override
          @Bean
          @Singleton
          public A get() {
              return new AImpl();
          }

          private void doSomething(@NonNull String arg) {
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.RemoveWithJansiLogbackConfiguration
examples:
- description: '`RemoveWithJansiLogbackConfigurationTest#removeWithJansi`'
  sources:
  - before: project
    language: mavenProject
  - before: |
      <configuration>
          <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
              <withJansi>true</withJansi>
              <!-- encoders are assigned the type
                   ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
              <encoder>
                  <pattern>%cyan(%d{HH:mm:ss.SSS}) %gray([%thread]) %highlight(%-5level) %magenta(%logger{36}) - %msg%n</pattern>
              </encoder>
          </appender>
          <root level="info">
              <appender-ref ref="STDOUT" />
          </root>
      </configuration>
    after: |
      <configuration>
          <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
              <!-- encoders are assigned the type
                   ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
              <encoder>
                  <pattern>%cyan(%d{HH:mm:ss.SSS}) %gray([%thread]) %highlight(%-5level) %magenta(%logger{36}) - %msg%n</pattern>
              </encoder>
          </appender>
          <root level="info">
              <appender-ref ref="STDOUT" />
          </root>
      </configuration>
    path: logback.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.SubclassesReturnedFromFactoriesNotInjectable
examples:
- description: '`SubclassesReturnedFromFactoriesNotInjectableTest#addsTypeForInternalImplementation`'
  sources:
  - before: |
      import java.util.concurrent.ForkJoinPool;
      import java.util.concurrent.ExecutorService;
      import javax.inject.Singleton;
      import io.micronaut.context.annotation.Factory;

      @Factory
      public class ExecutorFactory {

          @Singleton
          public ExecutorService executorService() {
              return ForkJoinPool.commonPool();
          }
      }
    after: |
      import java.util.concurrent.ForkJoinPool;
      import javax.inject.Singleton;
      import io.micronaut.context.annotation.Factory;

      @Factory
      public class ExecutorFactory {

          @Singleton
          public ForkJoinPool executorService() {
              return ForkJoinPool.commonPool();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.TypeRequiresIntrospection
examples:
- description: '`TypeRequiresIntrospectionTest#addsIntrospectionAnnotationFromParameter`'
  sources:
  - before: |
      package a.b;

      public class C {
          String name;
          String getName() { return name;}
          void setName(String name) {this.name = name;}
      }
    after: |
      package a.b;

      import io.micronaut.core.annotation.Introspected;

      @Introspected
      public class C {
          String name;
          String getName() { return name;}
          void setName(String name) {this.name = name;}
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.UpdateBlockingTaskExecutors
examples:
- description: '`UpdateTaskExecutorsTest#updateExecuteOnTaskExecutors`'
  sources:
  - before: |
      import io.micronaut.scheduling.TaskExecutors;
      import io.micronaut.scheduling.annotation.ExecuteOn;

      import jakarta.inject.Singleton;

      @Singleton
      public class GenericService {

          @ExecuteOn(TaskExecutors.IO)
          public void doSomeBlockingIOTask() {

          }
      }
    after: |
      import io.micronaut.scheduling.TaskExecutors;
      import io.micronaut.scheduling.annotation.ExecuteOn;

      import jakarta.inject.Singleton;

      @Singleton
      public class GenericService {

          @ExecuteOn(TaskExecutors.BLOCKING)
          public void doSomeBlockingIOTask() {

          }
      }
    language: java
  - before: project
    language: mavenProject
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.UpdateMicronautPlatformBom
examples:
- description: '`UpdateBuildPluginsTest#updateGradleBuildPlugins`'
  sources:
  - before: |
      plugins {
          id("com.github.johnrengelman.shadow") version "7.1.2"
          id("io.micronaut.application") version "3.7.9"
          id("io.micronaut.minimal.application") version "3.7.9"
          id("io.micronaut.aot") version "3.7.9"
          id("io.micronaut.component") version "3.7.9"
          id("io.micronaut.crac") version "3.7.9"
          id("io.micronaut.docker") version "3.7.9"
          id("io.micronaut.graalvm") version "3.7.9"
          id("io.micronaut.library") version "3.7.9"
          id("io.micronaut.minimal.library") version "3.7.9"
          id("io.micronaut.test-resources") version "3.5.1"
      }

      repositories {
          mavenCentral()
      }
    path: build.gradle
    language: groovy
  - before: micronautVersion=3.9.1
    path: gradle.properties
    language: properties
- description: '`UpdateMicronautDataTest#updateSQLAnnotations`'
  sources:
  - before: |
      import io.micronaut.data.jdbc.annotation.ColumnTransformer;
      import io.micronaut.data.jdbc.annotation.JoinColumn;
      import io.micronaut.data.jdbc.annotation.JoinColumns;
      import io.micronaut.data.jdbc.annotation.JoinTable;

      public class MyEntity {

          @JoinTable(
                      name = "m2m_address_association",
                      joinColumns = @JoinColumns({
                                            @JoinColumn(name="ADDR_ID", referencedColumnName="ID"),
                                            @JoinColumn(name="ADDR_ZIP", referencedColumnName="ZIP")
                                        }))
          List<String> addresses;

          @ColumnTransformer(read = "UPPER(org)")
          private String name;

      }
    after: |
      import io.micronaut.data.annotation.sql.ColumnTransformer;
      import io.micronaut.data.annotation.sql.JoinColumn;
      import io.micronaut.data.annotation.sql.JoinColumns;
      import io.micronaut.data.annotation.sql.JoinTable;

      public class MyEntity {

          @JoinTable(
                      name = "m2m_address_association",
                      joinColumns = @JoinColumns({
                                            @JoinColumn(name="ADDR_ID", referencedColumnName="ID"),
                                            @JoinColumn(name="ADDR_ZIP", referencedColumnName="ZIP")
                                        }))
          List<String> addresses;

          @ColumnTransformer(read = "UPPER(org)")
          private String name;

      }
    language: java
  - before: project
    language: mavenProject
- description: '`UpdateMicronautSessionTest#updateGradleDependencies`'
  sources:
  - before: |
      plugins {
          id "java-library"
      }
      dependencies {
          implementation("io.micronaut:micronaut-session")
      }
      repositories {
          mavenCentral()
      }
    after: |
      plugins {
          id "java-library"
      }
      dependencies {
          implementation("io.micronaut.session:micronaut-session")
      }
      repositories {
          mavenCentral()
      }
    path: build.gradle
    language: groovy
  - before: project
    language: mavenProject
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.UpgradeMicronautGradlePropertiesVersion
examples:
- description: '`UpgradeMicronautGradlePropertiesVersionTest#upgradeMicronaut2`'
  parameters:
  - 2.x
  sources:
  - before: micronautVersion=2.0.3
    path: gradle.properties
    language: properties
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.micronaut.UpgradeMicronautMavenPropertyVersion
examples:
- description: '`UpgradeMicronautMavenPropertyVersionTest#changeMavenMicronautVersion`'
  parameters:
  - 2.x
  sources:
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.mycompany.app</groupId>
          <artifactId>my-app</artifactId>
          <version>1</version>
          <properties>
              <micronaut.version>2.0.3</micronaut.version>
          </properties>
      </project>
    path: pom.xml
    language: xml
